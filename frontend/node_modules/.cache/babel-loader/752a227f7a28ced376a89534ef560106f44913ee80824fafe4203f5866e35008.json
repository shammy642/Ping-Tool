{"ast":null,"code":"var _jsxFileName = \"/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/State Management/WebsocketPingsContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\nimport useWebSocket from \"react-use-websocket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WebsocketPingsContext = /*#__PURE__*/createContext(undefined);\nexport const WebsocketPingsProvider = children => {\n  _s();\n  const [pingInfo, setPingInfo] = useState();\n  const [socketReady, setSocketReady] = useState(false);\n  const socketUrl = 'ws://127.0.0.1:3001';\n  const {\n    lastJsonMessage,\n    readyState\n  } = useWebSocket(socketUrl, {\n    onOpen: () => console.log('opened'),\n    //Will attempt to reconnect on all close events, such as server shutting down\n    shouldReconnect: closeEvent => true\n  });\n  useEffect(() => {\n    console.log(lastJsonMessage);\n  }, [lastJsonMessage]);\n  return /*#__PURE__*/_jsxDEV(WebsocketPingsContext.Provider, {\n    value: {\n      pingInfo\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(WebsocketPingsProvider, \"4antKnmtWLTXn7qbvVBsUSP5MbM=\", false, function () {\n  return [useWebSocket];\n});\n_c = WebsocketPingsProvider;\nvar _c;\n$RefreshReg$(_c, \"WebsocketPingsProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","useWebSocket","jsxDEV","_jsxDEV","WebsocketPingsContext","undefined","WebsocketPingsProvider","children","_s","pingInfo","setPingInfo","socketReady","setSocketReady","socketUrl","lastJsonMessage","readyState","onOpen","console","log","shouldReconnect","closeEvent","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/State Management/WebsocketPingsContext.tsx"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\nimport useWebSocket from \"react-use-websocket\";\n\n\nexport type PingResult = {\n    id: number;\n    ping: number;\n}\n\nexport type WebsocketPingsContextType = {\n    pingInfo: PingResult[] | undefined;\n\n}\n\nexport const WebsocketPingsContext = createContext<WebsocketPingsContextType | undefined>(undefined)\n\n\nexport const WebsocketPingsProvider = (children: React.ReactNode) => {\n    const [pingInfo, setPingInfo] = useState<PingResult[] | undefined>();\n    const [socketReady, setSocketReady] = useState(false)\n    const socketUrl = 'ws://127.0.0.1:3001';\n\n    const {\n        lastJsonMessage,\n        readyState,\n    } = useWebSocket(socketUrl, {\n        onOpen: () => console.log('opened'),\n        //Will attempt to reconnect on all close events, such as server shutting down\n        shouldReconnect: (closeEvent) => true,\n    });\n\n    useEffect(() => {\n        console.log(lastJsonMessage)\n    },[lastJsonMessage])\n\n\n    return (\n        <WebsocketPingsContext.Provider value={{ pingInfo }}>\n            {children}\n        </WebsocketPingsContext.Provider>\n    )\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,YAAY,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAa/C,OAAO,MAAMC,qBAAqB,gBAAGN,aAAa,CAAwCO,SAAS,CAAC;AAGpG,OAAO,MAAMC,sBAAsB,GAAIC,QAAyB,IAAK;EAAAC,EAAA;EACjE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAA2B,CAAC;EACpE,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAMa,SAAS,GAAG,qBAAqB;EAEvC,MAAM;IACFC,eAAe;IACfC;EACJ,CAAC,GAAGd,YAAY,CAACY,SAAS,EAAE;IACxBG,MAAM,EAAEA,CAAA,KAAMC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACnC;IACAC,eAAe,EAAGC,UAAU,IAAK;EACrC,CAAC,CAAC;EAEFrB,SAAS,CAAC,MAAM;IACZkB,OAAO,CAACC,GAAG,CAACJ,eAAe,CAAC;EAChC,CAAC,EAAC,CAACA,eAAe,CAAC,CAAC;EAGpB,oBACIX,OAAA,CAACC,qBAAqB,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEb;IAAS,CAAE;IAAAF,QAAA,EAC/CA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEzC,CAAC;AAAAlB,EAAA,CAxBYF,sBAAsB;EAAA,QAQ3BL,YAAY;AAAA;AAAA0B,EAAA,GARPrB,sBAAsB;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import{useContext,useEffect,useState}from\"react\";import{ReceiverListContext}from\"../../State Management/ReceiverListContext\";import{Grid,Typography}from\"@mui/material\";import{Receiver}from\"./Receiver\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export const MainPage=()=>{const{receiverList}=useContext(ReceiverListContext)||{};const[receiverTypes,setReceiverTypes]=useState([]);const[devices,setDevices]=useState([]);useEffect(()=>{if(receiverList){let receiverTypesList=[];const filteredSelectedReceivers=receiverList.filter(receiver=>receiver.isSelected);filteredSelectedReceivers.forEach(receiver=>{if(!receiverTypesList.includes(receiver.type)){receiverTypesList.push(receiver.type);}});setReceiverTypes(receiverTypesList);}},[receiverList]);useEffect(()=>{if(receiverList){let receiverDeviceList=[];const filteredSelectedReceivers=receiverList.filter(receiver=>receiver.isSelected);filteredSelectedReceivers.forEach(receiver=>{if(!receiverDeviceList.includes(receiver.device)){receiverDeviceList.push(receiver.device);}});console.log(\"Device list\",receiverDeviceList);setDevices(receiverDeviceList);}},[receiverList]);return/*#__PURE__*/_jsx(Grid,{container:true,children:receiverTypes.map(receiverType=>{return/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,md:2,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",fontWeight:\"bold\",children:receiverType}),/*#__PURE__*/_jsx(Grid,{item:true,display:\"flex\",flexDirection:{sx:\"row\",md:\"column\"},flexWrap:\"wrap\",children:receiverList&&receiverList.filter(receiver=>receiver.type===receiverType&&receiver.isSelected).map(receiver=>{return/*#__PURE__*/_jsx(Grid,{item:true,xs:6,md:12,children:/*#__PURE__*/_jsx(Receiver,{IP:receiver.IP,id:receiver.id,name:receiver.name})},\"deviceBig.\"+receiver.id);})})]},\"receiverType.\"+receiverType);})})// <Grid container>\n//     {receiverTypes.map((receiverType) => {\n//         return <Grid item xs={12} md={2} key={\"receiverType.\" + receiverType}>\n//             <Typography variant=\"h6\" fontWeight='bold'>{receiverType}</Typography>\n//             <Grid item display=\"flex\" flexDirection={{ sx: \"row\", md: \"column\" }} flexWrap=\"wrap\">\n//                 {receiverList && receiverList\n//                 .filter((device => (device.type === receiverType))\n//                 )\n//                 .map((theDevice) => {\n//                     return <Grid item>\n//                         <Device device={theDevice.device} />\n//                     </Grid>\n//                 })}\n//             </Grid>\n//         </Grid>\n//     })}\n// </Grid>\n;};","map":{"version":3,"names":["useContext","useEffect","useState","ReceiverListContext","Grid","Typography","Receiver","jsx","_jsx","jsxs","_jsxs","MainPage","receiverList","receiverTypes","setReceiverTypes","devices","setDevices","receiverTypesList","filteredSelectedReceivers","filter","receiver","isSelected","forEach","includes","type","push","receiverDeviceList","device","console","log","container","children","map","receiverType","item","xs","md","variant","fontWeight","display","flexDirection","sx","flexWrap","IP","id","name"],"sources":["/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/pages/monitorReceivers/mainPage.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { ReceiverListContext } from \"../../State Management/ReceiverListContext\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { Receiver } from \"./Receiver\";\nimport { Device } from \"./Device\";\n\n\n\nexport const MainPage = () => {\n    const { receiverList } = useContext(ReceiverListContext) || {};\n    const [receiverTypes, setReceiverTypes] = useState<string[]>([]);\n    const [devices, setDevices] = useState<string[]>([])\n\n    useEffect(() => {\n        if (receiverList) {\n            let receiverTypesList: string[] = [];\n            const filteredSelectedReceivers = receiverList.filter((receiver) => receiver.isSelected)\n            filteredSelectedReceivers.forEach((receiver) => {\n                if (!receiverTypesList.includes(receiver.type)) {\n                    receiverTypesList.push(receiver.type)\n                }\n            })\n            setReceiverTypes(receiverTypesList)\n        }\n    }, [receiverList])\n\n    useEffect(() => {\n        if (receiverList) {\n            let receiverDeviceList: string[] = [];\n            const filteredSelectedReceivers = receiverList.filter((receiver) => receiver.isSelected)\n            filteredSelectedReceivers.forEach((receiver) => {\n                if (!receiverDeviceList.includes(receiver.device)) {\n                    receiverDeviceList.push(receiver.device)\n                }\n            })\n            console.log(\"Device list\", receiverDeviceList)\n            setDevices(receiverDeviceList)\n        }\n    }, [receiverList])\n\n    return (\n        <Grid container>\n            {receiverTypes.map((receiverType) => {\n                return <Grid item xs={12} md={2} key={\"receiverType.\" + receiverType}>\n                    <Typography variant=\"h6\" fontWeight='bold'>{receiverType}</Typography>\n                    <Grid item display=\"flex\" flexDirection={{sx:\"row\", md:\"column\"}} flexWrap=\"wrap\">\n                    {receiverList && receiverList\n                        .filter((receiver => (receiver.type === receiverType) && receiver.isSelected))\n                        .map((receiver) => {\n                            return <Grid item xs={6} md={12} key={\"deviceBig.\" + receiver.id}>\n                                <Receiver  IP={receiver.IP} id={receiver.id} name={receiver.name}/>\n                            </Grid>\n                        })}\n                        </Grid>\n                </Grid>\n\n            })}\n        </Grid>\n\n        // <Grid container>\n        //     {receiverTypes.map((receiverType) => {\n        //         return <Grid item xs={12} md={2} key={\"receiverType.\" + receiverType}>\n        //             <Typography variant=\"h6\" fontWeight='bold'>{receiverType}</Typography>\n        //             <Grid item display=\"flex\" flexDirection={{ sx: \"row\", md: \"column\" }} flexWrap=\"wrap\">\n        //                 {receiverList && receiverList\n        //                 .filter((device => (device.type === receiverType))\n        //                 )\n        //                 .map((theDevice) => {\n        //                     return <Grid item>\n        //                         <Device device={theDevice.device} />\n        //                     </Grid>\n        //                 })}\n        //             </Grid>\n        //         </Grid>\n\n        //     })}\n        // </Grid>\n\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
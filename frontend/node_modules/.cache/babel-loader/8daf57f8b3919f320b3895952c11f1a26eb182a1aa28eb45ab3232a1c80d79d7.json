{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attachSharedListeners = void 0;\nvar globals_1 = require(\"./globals\");\nvar constants_1 = require(\"./constants\");\nvar manage_subscribers_1 = require(\"./manage-subscribers\");\nvar socket_io_1 = require(\"./socket-io\");\nvar bindMessageHandler = function (webSocketInstance, url) {\n  webSocketInstance.onmessage = function (message) {\n    manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n      if (typeof subscriber.optionsRef.current.filter === 'function' && subscriber.optionsRef.current.filter(message) !== true) {\n        return;\n      }\n      subscriber.setLastMessage(message);\n    });\n  };\n};\nvar bindOpenHandler = function (webSocketInstance, url) {\n  webSocketInstance.onopen = function (event) {\n    manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n      subscriber.reconnectCount.current = 0;\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n      subscriber.setReadyState(constants_1.ReadyState.OPEN);\n    });\n  };\n};\nvar bindCloseHandler = function (webSocketInstance, url) {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = function (event) {\n      manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n        subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n      });\n      delete globals_1.sharedWebSockets[url];\n      manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n        var _a, _b;\n        if (subscriber.optionsRef.current.shouldReconnect && subscriber.optionsRef.current.shouldReconnect(event)) {\n          var reconnectAttempts = (_a = subscriber.optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT;\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            setTimeout(function () {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, (_b = subscriber.optionsRef.current.reconnectInterval) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts);\n            console.warn(\"Max reconnect attempts of \" + reconnectAttempts + \" exceeded\");\n          }\n        }\n      });\n    };\n  }\n};\nvar bindErrorHandler = function (webSocketInstance, url) {\n  webSocketInstance.onerror = function (error) {\n    manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n      if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose(__assign(__assign({}, error), {\n          code: 1006,\n          reason: \"An error occurred with the EventSource: \" + error,\n          wasClean: false\n        }));\n        subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n      }\n    });\n    if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\nexports.attachSharedListeners = function (webSocketInstance, url, optionsRef, sendMessage) {\n  var interval;\n  if (optionsRef.current.fromSocketIO) {\n    interval = socket_io_1.setUpSocketIOPing(sendMessage);\n  }\n  bindMessageHandler(webSocketInstance, url);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url);\n  bindErrorHandler(webSocketInstance, url);\n  return function () {\n    if (interval) clearInterval(interval);\n  };\n};","map":{"version":3,"names":["globals_1","require","constants_1","manage_subscribers_1","socket_io_1","bindMessageHandler","webSocketInstance","url","onmessage","message","getSubscribers","forEach","subscriber","optionsRef","current","onMessage","filter","setLastMessage","bindOpenHandler","onopen","event","reconnectCount","onOpen","setReadyState","ReadyState","OPEN","bindCloseHandler","WebSocket","onclose","onClose","CLOSED","sharedWebSockets","shouldReconnect","reconnectAttempts","_a","DEFAULT_RECONNECT_LIMIT","setTimeout","reconnect","_b","reconnectInterval","DEFAULT_RECONNECT_INTERVAL_MS","onReconnectStop","console","warn","bindErrorHandler","onerror","error","onError","isEventSourceSupported","EventSource","__assign","code","reason","wasClean","close","exports","attachSharedListeners","sendMessage","interval","fromSocketIO","setUpSocketIOPing","clearInterval"],"sources":["/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/node_modules/react-use-websocket/src/lib/attach-shared-listeners.ts"],"sourcesContent":["import { sharedWebSockets } from './globals';\nimport { DEFAULT_RECONNECT_LIMIT, DEFAULT_RECONNECT_INTERVAL_MS, ReadyState, isEventSourceSupported } from './constants';\nimport { getSubscribers } from './manage-subscribers';\nimport { MutableRefObject } from 'react';\nimport { Options, SendMessage, WebSocketLike } from './types';\nimport { setUpSocketIOPing } from './socket-io';\n\nconst bindMessageHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onmessage = (message: WebSocketEventMap['message']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n\n      if (\n        typeof subscriber.optionsRef.current.filter === 'function' &&\n        subscriber.optionsRef.current.filter(message) !== true\n      ) {\n        return;\n      }\n\n      subscriber.setLastMessage(message);\n    });\n  };\n};\n\nconst bindOpenHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onopen = (event: WebSocketEventMap['open']) => {\n    getSubscribers(url).forEach(subscriber => {\n      subscriber.reconnectCount.current = 0;\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n\n      subscriber.setReadyState(ReadyState.OPEN);\n    });\n  };\n};\n\nconst bindCloseHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = (event: WebSocketEventMap['close']) => {\n      getSubscribers(url).forEach(subscriber => {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      });\n      \n      delete sharedWebSockets[url];\n  \n      getSubscribers(url).forEach(subscriber => {\n        if (\n          subscriber.optionsRef.current.shouldReconnect &&\n          subscriber.optionsRef.current.shouldReconnect(event)\n        ) {\n          const reconnectAttempts = subscriber.optionsRef.current.reconnectAttempts ?? DEFAULT_RECONNECT_LIMIT;\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            setTimeout(() => {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, subscriber.optionsRef.current.reconnectInterval ?? DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts as number);\n            console.warn(`Max reconnect attempts of ${reconnectAttempts} exceeded`);\n          }\n        }\n      });\n    };\n  }\n};\n\nconst bindErrorHandler = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n) => {\n  webSocketInstance.onerror = (error: WebSocketEventMap['error']) => {\n    getSubscribers(url).forEach(subscriber => {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n      if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose({\n          ...error,\n          code: 1006,\n          reason: `An error occurred with the EventSource: ${error}`,\n          wasClean: false,\n        });\n  \n        subscriber.setReadyState(ReadyState.CLOSED);\n      }\n    });\n    if (isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\n\nexport const attachSharedListeners = (\n  webSocketInstance: WebSocketLike,\n  url: string,\n  optionsRef: MutableRefObject<Options>,\n  sendMessage: SendMessage,\n) => {\n  let interval: number;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(webSocketInstance, url);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url);\n  bindErrorHandler(webSocketInstance, url);\n\n  return () => {\n    if (interval) clearInterval(interval);\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/pages/monitorReceivers/mainPage.tsx\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { ReceiverListContext } from \"../../State Management/ReceiverListContext\";\nimport { Grid } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MainPage = () => {\n  _s();\n  const {\n    receiverList\n  } = useContext(ReceiverListContext) || {};\n  const [receiverTypes, setReceiverTypes] = useState([]);\n  const [devices, setDevices] = useState([]);\n  useEffect(() => {\n    if (receiverList) {\n      let receiverTypesList = [];\n      const filteredSelectedReceivers = receiverList.filter(receiver => receiver.isSelected);\n      filteredSelectedReceivers.forEach(receiver => {\n        if (!receiverTypesList.includes(receiver.type)) {\n          receiverTypesList.push(receiver.type);\n        }\n      });\n      setReceiverTypes(receiverTypesList);\n    }\n  }, [receiverList]);\n  return (\n    /*#__PURE__*/\n    // <Grid container>\n    //     {receiverTypes.map((receiverType) => {\n    //         return <Grid item xs={12} md={2} key={\"receiverType.\" + receiverType}>\n    //             <Typography variant=\"h6\" fontWeight='bold'>{receiverType}</Typography>\n    //             <Grid item display=\"flex\" flexDirection={{sx:\"row\", md:\"column\"}} flexWrap=\"wrap\">\n    //             {receiverList && receiverList\n    //                 .filter((receiver => (receiver.type === receiverType) && receiver.isSelected))\n    //                 .map((receiver) => {\n    //                     return <Grid item xs={6} md={12} key={\"deviceBig.\" + receiver.id}>\n    //                         <Receiver  IP={receiver.IP} id={receiver.id} name={receiver.name}/>\n    //                     </Grid>\n    //                 })}\n    //                 </Grid>\n    //         </Grid>\n    //     })}\n    // </Grid>\n    _jsxDEV(Grid, {\n      container: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  );\n};\n_s(MainPage, \"BhlQrm7rLweXtdF9w4cIkpu14Ds=\");\n_c = MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["useContext","useEffect","useState","ReceiverListContext","Grid","jsxDEV","_jsxDEV","MainPage","_s","receiverList","receiverTypes","setReceiverTypes","devices","setDevices","receiverTypesList","filteredSelectedReceivers","filter","receiver","isSelected","forEach","includes","type","push","container","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/pages/monitorReceivers/mainPage.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { ReceiverListContext } from \"../../State Management/ReceiverListContext\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { Receiver } from \"./Receiver\";\n\n\n\nexport const MainPage = () => {\n    const { receiverList } = useContext(ReceiverListContext) || {};\n    const [ receiverTypes, setReceiverTypes ] = useState<string[]>([]);\n    const [ devices, setDevices ] = useState<string[]>([])\n\n    useEffect(() => {\n        if (receiverList) {\n            let receiverTypesList: string[] = [];\n            const filteredSelectedReceivers = receiverList.filter((receiver) => receiver.isSelected)\n            filteredSelectedReceivers.forEach((receiver) => {\n                if (!receiverTypesList.includes(receiver.type)) {\n                    receiverTypesList.push(receiver.type)\n                }\n            })\n            setReceiverTypes(receiverTypesList)\n        }\n    }, [receiverList])\n\n    return (\n        // <Grid container>\n        //     {receiverTypes.map((receiverType) => {\n        //         return <Grid item xs={12} md={2} key={\"receiverType.\" + receiverType}>\n        //             <Typography variant=\"h6\" fontWeight='bold'>{receiverType}</Typography>\n        //             <Grid item display=\"flex\" flexDirection={{sx:\"row\", md:\"column\"}} flexWrap=\"wrap\">\n        //             {receiverList && receiverList\n        //                 .filter((receiver => (receiver.type === receiverType) && receiver.isSelected))\n        //                 .map((receiver) => {\n        //                     return <Grid item xs={6} md={12} key={\"deviceBig.\" + receiver.id}>\n        //                         <Receiver  IP={receiver.IP} id={receiver.id} name={receiver.name}/>\n        //                     </Grid>\n        //                 })}\n        //                 </Grid>\n        //         </Grid>\n                \n        //     })}\n        // </Grid>\n            <Grid container>\n\n            </Grid>\n\n    )\n}"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,mBAAmB,QAAQ,4CAA4C;AAChF,SAASC,IAAI,QAAoB,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKjD,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IAAEC;EAAa,CAAC,GAAGT,UAAU,CAACG,mBAAmB,CAAC,IAAI,CAAC,CAAC;EAC9D,MAAM,CAAEO,aAAa,EAAEC,gBAAgB,CAAE,GAAGT,QAAQ,CAAW,EAAE,CAAC;EAClE,MAAM,CAAEU,OAAO,EAAEC,UAAU,CAAE,GAAGX,QAAQ,CAAW,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACZ,IAAIQ,YAAY,EAAE;MACd,IAAIK,iBAA2B,GAAG,EAAE;MACpC,MAAMC,yBAAyB,GAAGN,YAAY,CAACO,MAAM,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,UAAU,CAAC;MACxFH,yBAAyB,CAACI,OAAO,CAAEF,QAAQ,IAAK;QAC5C,IAAI,CAACH,iBAAiB,CAACM,QAAQ,CAACH,QAAQ,CAACI,IAAI,CAAC,EAAE;UAC5CP,iBAAiB,CAACQ,IAAI,CAACL,QAAQ,CAACI,IAAI,CAAC;QACzC;MACJ,CAAC,CAAC;MACFV,gBAAgB,CAACG,iBAAiB,CAAC;IACvC;EACJ,CAAC,EAAE,CAACL,YAAY,CAAC,CAAC;EAElB;IAAA;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACIH,OAAA,CAACF,IAAI;MAACmB,SAAS;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAET;EAAC;AAGnB,CAAC;AAAAnB,EAAA,CAzCYD,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
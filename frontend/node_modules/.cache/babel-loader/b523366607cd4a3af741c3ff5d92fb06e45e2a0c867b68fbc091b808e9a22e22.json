{"ast":null,"code":"import{createContext,useEffect,useState}from\"react\";import useWebSocket from\"react-use-websocket\";import{jsx as _jsx}from\"react/jsx-runtime\";export const WebsocketPingsContext=/*#__PURE__*/createContext(undefined);export const WebsocketPingsProvider=props=>{const[pingInfo,setPingInfo]=useState();const socketUrl='ws://127.0.0.1:3001';const{lastJsonMessage}=useWebSocket(socketUrl,{onOpen:()=>console.log('WebSocket opened'),onClose:()=>console.log('WebSocket closed'),shouldReconnect:closeEvent=>true// Will attempt to reconnect on all close events\n});useEffect(()=>{if(lastJsonMessage!==null){console.log('Received WebSocket message:',lastJsonMessage);setPingInfo(lastJsonMessage);}},[lastJsonMessage]);return/*#__PURE__*/_jsx(WebsocketPingsContext.Provider,{value:{pingInfo},children:props.children});};","map":{"version":3,"names":["createContext","useEffect","useState","useWebSocket","jsx","_jsx","WebsocketPingsContext","undefined","WebsocketPingsProvider","props","pingInfo","setPingInfo","socketUrl","lastJsonMessage","onOpen","console","log","onClose","shouldReconnect","closeEvent","Provider","value","children"],"sources":["/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/State Management/WebsocketPingsContext.tsx"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\nimport useWebSocket from \"react-use-websocket\";\n\n\nexport type PingResult = {\n    host: string;\n    pingTime: number;\n}\n\nexport type WebsocketPingsContextType = {\n    pingInfo: PingResult[] | undefined;\n\n}\n\nexport const WebsocketPingsContext = createContext<WebsocketPingsContextType | undefined>(undefined)\n\ntype WebsocketPingsProviderProps = {\n    children: React.ReactNode;\n};\n\nexport const WebsocketPingsProvider = (props: WebsocketPingsProviderProps) => {\n    const [pingInfo, setPingInfo] = useState<PingResult[] | undefined>();\n    const socketUrl = 'ws://127.0.0.1:3001';\n\n    const { lastJsonMessage } = useWebSocket(socketUrl, {\n        onOpen: () => console.log('WebSocket opened'),\n        onClose: () => console.log('WebSocket closed'),\n        shouldReconnect: (closeEvent) => true, // Will attempt to reconnect on all close events\n    });\n\n    useEffect(() => {\n        if (lastJsonMessage !== null) {\n            console.log('Received WebSocket message:', lastJsonMessage);\n            setPingInfo(lastJsonMessage);\n        }\n    }, [lastJsonMessage]);\n\n    return (\n        <WebsocketPingsContext.Provider value={{ pingInfo }}>\n            {props.children}\n        </WebsocketPingsContext.Provider>\n    );\n}"],"mappings":"AAAA,OAASA,aAAa,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC1D,MAAO,CAAAC,YAAY,KAAM,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAa/C,MAAO,MAAM,CAAAC,qBAAqB,cAAGN,aAAa,CAAwCO,SAAS,CAAC,CAMpG,MAAO,MAAM,CAAAC,sBAAsB,CAAIC,KAAkC,EAAK,CAC1E,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGT,QAAQ,CAA2B,CAAC,CACpE,KAAM,CAAAU,SAAS,CAAG,qBAAqB,CAEvC,KAAM,CAAEC,eAAgB,CAAC,CAAGV,YAAY,CAACS,SAAS,CAAE,CAChDE,MAAM,CAAEA,CAAA,GAAMC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAC7CC,OAAO,CAAEA,CAAA,GAAMF,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAC9CE,eAAe,CAAGC,UAAU,EAAK,IAAM;AAC3C,CAAC,CAAC,CAEFlB,SAAS,CAAC,IAAM,CACZ,GAAIY,eAAe,GAAK,IAAI,CAAE,CAC1BE,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAEH,eAAe,CAAC,CAC3DF,WAAW,CAACE,eAAe,CAAC,CAChC,CACJ,CAAC,CAAE,CAACA,eAAe,CAAC,CAAC,CAErB,mBACIR,IAAA,CAACC,qBAAqB,CAACc,QAAQ,EAACC,KAAK,CAAE,CAAEX,QAAS,CAAE,CAAAY,QAAA,CAC/Cb,KAAK,CAACa,QAAQ,CACa,CAAC,CAEzC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
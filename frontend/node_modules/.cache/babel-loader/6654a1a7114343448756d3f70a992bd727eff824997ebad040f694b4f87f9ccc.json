{"ast":null,"code":"var _jsxFileName = \"/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/pages/monitorReceivers/mainPage.tsx\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { ReceiverListContext } from \"../../State Management/ReceiverListContext\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { Receiver } from \"./Receiver\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MainPage = () => {\n  _s();\n  const {\n    receiverList\n  } = useContext(ReceiverListContext) || {};\n  const [receiverTypes, setReceiverTypes] = useState([]);\n  const [devices, setDevices] = useState([]);\n  useEffect(() => {\n    if (receiverList) {\n      let receiverTypesList = [];\n      const filteredSelectedReceivers = receiverList.filter(receiver => receiver.isSelected);\n      filteredSelectedReceivers.forEach(receiver => {\n        if (!receiverTypesList.includes(receiver.type)) {\n          receiverTypesList.push(receiver.type);\n        }\n      });\n      setReceiverTypes(receiverTypesList);\n    }\n  }, [receiverList]);\n  useEffect(() => {\n    if (receiverList) {\n      let receiverDeviceList = [];\n      const filteredSelectedReceivers = receiverList.filter(receiver => receiver.isSelected);\n      filteredSelectedReceivers.forEach(receiver => {\n        if (!receiverDeviceList.includes(receiver.device)) {\n          receiverDeviceList.push(receiver.device);\n        }\n      });\n      setDevices(receiverDeviceList);\n    }\n  }, [receiverList]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: receiverTypes.map(receiverType => {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 2,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          fontWeight: \"bold\",\n          children: receiverType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          display: \"flex\",\n          flexDirection: {\n            sx: \"row\",\n            md: \"column\"\n          },\n          flexWrap: \"wrap\",\n          children: receiverList && receiverList.filter(receiver => receiver.type === receiverType && receiver.isSelected).map(receiver => {\n            return /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              md: 12,\n              children: /*#__PURE__*/_jsxDEV(Receiver, {\n                IP: receiver.IP,\n                id: receiver.id,\n                name: receiver.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 33\n              }, this)\n            }, \"deviceBig.\" + receiver.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)]\n      }, \"receiverType.\" + receiverType, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this)\n\n  // <Grid container>\n  //     {receiverTypes.map((receiverType) => {\n  //         return <Grid item xs={12} md={2} key={\"receiverType.\" + receiverType}>\n  //             <Typography variant=\"h6\" fontWeight='bold'>{receiverType}</Typography>\n  //             <Grid item display=\"flex\" flexDirection={{ sx: \"row\", md: \"column\" }} flexWrap=\"wrap\">\n  //                 {receiverList && receiverList\n  //                 .filter((receiver => (receiver.device === receiver) && receiver.isSelected)) ????\n  //                 .map((device) => {\n  //                     return <Grid item>\n  //                         <Device device={device} />\n  //                     </Grid>\n  //                 })}\n  //             </Grid>\n  //         </Grid>\n\n  //     })}\n  // </Grid>\n  ;\n};\n_s(MainPage, \"qi6vxp+US8JFNV5OaeK0qzj7Fjw=\");\n_c = MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["useContext","useEffect","useState","ReceiverListContext","Grid","Typography","Receiver","jsxDEV","_jsxDEV","MainPage","_s","receiverList","receiverTypes","setReceiverTypes","devices","setDevices","receiverTypesList","filteredSelectedReceivers","filter","receiver","isSelected","forEach","includes","type","push","receiverDeviceList","device","container","children","map","receiverType","item","xs","md","variant","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","display","flexDirection","sx","flexWrap","IP","id","name","_c","$RefreshReg$"],"sources":["/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/pages/monitorReceivers/mainPage.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { ReceiverListContext } from \"../../State Management/ReceiverListContext\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { Receiver } from \"./Receiver\";\nimport { Device } from \"./Device\";\n\n\n\nexport const MainPage = () => {\n    const { receiverList } = useContext(ReceiverListContext) || {};\n    const [receiverTypes, setReceiverTypes] = useState<string[]>([]);\n    const [devices, setDevices] = useState<string[]>([])\n\n    useEffect(() => {\n        if (receiverList) {\n            let receiverTypesList: string[] = [];\n            const filteredSelectedReceivers = receiverList.filter((receiver) => receiver.isSelected)\n            filteredSelectedReceivers.forEach((receiver) => {\n                if (!receiverTypesList.includes(receiver.type)) {\n                    receiverTypesList.push(receiver.type)\n                }\n            })\n            setReceiverTypes(receiverTypesList)\n        }\n    }, [receiverList])\n\n    useEffect(() => {\n        if (receiverList) {\n            let receiverDeviceList: string[] = [];\n            const filteredSelectedReceivers = receiverList.filter((receiver) => receiver.isSelected)\n            filteredSelectedReceivers.forEach((receiver) => {\n                if (!receiverDeviceList.includes(receiver.device)) {\n                    receiverDeviceList.push(receiver.device)\n                }\n            })\n            setDevices(receiverDeviceList)\n        }\n    }, [receiverList])\n\n    return (\n        <Grid container>\n            {receiverTypes.map((receiverType) => {\n                return <Grid item xs={12} md={2} key={\"receiverType.\" + receiverType}>\n                    <Typography variant=\"h6\" fontWeight='bold'>{receiverType}</Typography>\n                    <Grid item display=\"flex\" flexDirection={{sx:\"row\", md:\"column\"}} flexWrap=\"wrap\">\n                    {receiverList && receiverList\n                        .filter((receiver => (receiver.type === receiverType) && receiver.isSelected))\n                        .map((receiver) => {\n                            return <Grid item xs={6} md={12} key={\"deviceBig.\" + receiver.id}>\n                                <Receiver  IP={receiver.IP} id={receiver.id} name={receiver.name}/>\n                            </Grid>\n                        })}\n                        </Grid>\n                </Grid>\n\n            })}\n        </Grid>\n\n        // <Grid container>\n        //     {receiverTypes.map((receiverType) => {\n        //         return <Grid item xs={12} md={2} key={\"receiverType.\" + receiverType}>\n        //             <Typography variant=\"h6\" fontWeight='bold'>{receiverType}</Typography>\n        //             <Grid item display=\"flex\" flexDirection={{ sx: \"row\", md: \"column\" }} flexWrap=\"wrap\">\n        //                 {receiverList && receiverList\n        //                 .filter((receiver => (receiver.device === receiver) && receiver.isSelected)) ????\n        //                 .map((device) => {\n        //                     return <Grid item>\n        //                         <Device device={device} />\n        //                     </Grid>\n        //                 })}\n        //             </Grid>\n        //         </Grid>\n\n        //     })}\n        // </Grid>\n\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
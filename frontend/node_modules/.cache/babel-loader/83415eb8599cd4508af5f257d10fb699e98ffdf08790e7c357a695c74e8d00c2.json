{"ast":null,"code":"var _jsxFileName = \"/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/pages/monitorReceivers/mainPage.tsx\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { ReceiverListContext } from \"../../State Management/ReceiverListContext\";\nimport { Grid } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MainPage = () => {\n  _s();\n  const {\n    receiverList\n  } = useContext(ReceiverListContext) || {};\n  const [receiverTypes, setReceiverTypes] = useState([]);\n  useEffect(() => {\n    if (receiverList) {\n      let recevierTypes = [];\n      receiverList === null || receiverList === void 0 ? void 0 : receiverList.forEach(receiver => {\n        if (!recevierTypes.includes(receiver.type)) {\n          recevierTypes.push(receiver.type);\n        }\n      });\n      setReceiverTypes(receiverTypes);\n    }\n  }, [receiverList, receiverTypes]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_s(MainPage, \"dClh4FJaKNEPmnppH3TnUQWvVYk=\");\n_c = MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["useContext","useEffect","useState","ReceiverListContext","Grid","jsxDEV","_jsxDEV","MainPage","_s","receiverList","receiverTypes","setReceiverTypes","recevierTypes","forEach","receiver","includes","type","push","container","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/pages/monitorReceivers/mainPage.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { ReceiverListContext, ReceiverListContextType, ReceiverObjectProps } from \"../../State Management/ReceiverListContext\";\nimport {  Grid, Typography } from \"@mui/material\";\nimport { DeviceBig } from \"./DeviceBig\";\n\n\n\nexport const MainPage = () => {\n    const { receiverList } = useContext(ReceiverListContext) || {};\n    const [receiverTypes, setReceiverTypes] = useState<string[]>([]);\n    \n    useEffect(() => {\n        if (receiverList) {\n        let recevierTypes: string[] = [];\n        receiverList?.forEach((receiver) => {\n            if (!recevierTypes.includes(receiver.type)) {\n                recevierTypes.push(receiver.type)\n            }\n        })\n        setReceiverTypes(receiverTypes)\n    }\n    }, [receiverList, receiverTypes])\n        \n    \n    \n    return (\n        <Grid container >\n            {/* {receiverList && receiverList.map((receiver) => (\n            \n                <Grid item xs={12} sm={6} md={2} key={receiver.type}>\n                    <Typography variant=\"h6\" fontWeight='bold'>{receiver.type}</Typography>\n                    {receiverList.map(receiver => (\n                        <Grid item xs={12} key={receiver.id} >\n                            <DeviceBig key={receiver.id} id={receiver.id} name={receiver.name} IP={receiver.IP}/>\n                        </Grid>\n                    ))}\n                </Grid>\n            ))} */}\n        </Grid>\n    )\n}"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,mBAAmB,QAAsD,4CAA4C;AAC9H,SAAUC,IAAI,QAAoB,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKlD,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IAAEC;EAAa,CAAC,GAAGT,UAAU,CAACG,mBAAmB,CAAC,IAAI,CAAC,CAAC;EAC9D,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAW,EAAE,CAAC;EAEhED,SAAS,CAAC,MAAM;IACZ,IAAIQ,YAAY,EAAE;MAClB,IAAIG,aAAuB,GAAG,EAAE;MAChCH,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEI,OAAO,CAAEC,QAAQ,IAAK;QAChC,IAAI,CAACF,aAAa,CAACG,QAAQ,CAACD,QAAQ,CAACE,IAAI,CAAC,EAAE;UACxCJ,aAAa,CAACK,IAAI,CAACH,QAAQ,CAACE,IAAI,CAAC;QACrC;MACJ,CAAC,CAAC;MACFL,gBAAgB,CAACD,aAAa,CAAC;IACnC;EACA,CAAC,EAAE,CAACD,YAAY,EAAEC,aAAa,CAAC,CAAC;EAIjC,oBACIJ,OAAA,CAACF,IAAI;IAACc,SAAS;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAYT,CAAC;AAEf,CAAC;AAAAd,EAAA,CAjCYD,QAAQ;AAAAgB,EAAA,GAARhB,QAAQ;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
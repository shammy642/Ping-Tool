{"ast":null,"code":"var _jsxFileName = \"/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/pages/monitorReceivers/mainPage.tsx\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport { ReceiverListContext } from \"../../State Management/ReceiverListContext\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MainPage = () => {\n  _s();\n  const {\n    receiverList\n  } = useContext(ReceiverListContext) || {};\n  const [receiverTypes, setReceiverTypes] = useState([]);\n  const [devices, setDevices] = useState([]);\n  useEffect(() => {\n    if (receiverList) {\n      let receiverTypesList = [];\n      const filteredSelectedReceivers = receiverList.filter(receiver => receiver.isSelected);\n      filteredSelectedReceivers.forEach(receiver => {\n        if (!receiverTypesList.includes(receiver.type)) {\n          receiverTypesList.push(receiver.type);\n        }\n      });\n      setReceiverTypes(receiverTypesList);\n    }\n  }, [receiverList]);\n  useEffect(() => {\n    if (receiverList) {\n      let receiverDeviceList = [];\n      const filteredSelectedReceivers = receiverList.filter(receiver => receiver.isSelected);\n      filteredSelectedReceivers.forEach(receiver => {\n        if (!receiverDeviceList.includes(receiver.device)) {\n          receiverDeviceList.push(receiver.type);\n        }\n      });\n      setDevices(receiverDeviceList);\n    }\n  }, [receiverList]);\n  return (\n    /*#__PURE__*/\n    // <Grid container>\n    //     {receiverTypes.map((receiverType) => {\n    //         return <Grid item xs={12} md={2} key={\"receiverType.\" + receiverType}>\n    //             <Typography variant=\"h6\" fontWeight='bold'>{receiverType}</Typography>\n    //             <Grid item display=\"flex\" flexDirection={{sx:\"row\", md:\"column\"}} flexWrap=\"wrap\">\n    //             {receiverList && receiverList\n    //                 .filter((receiver => (receiver.type === receiverType) && receiver.isSelected))\n    //                 .map((receiver) => {\n    //                     return <Grid item xs={6} md={12} key={\"deviceBig.\" + receiver.id}>\n    //                         <Receiver  IP={receiver.IP} id={receiver.id} name={receiver.name}/>\n    //                     </Grid>\n    //                 })}\n    //                 </Grid>\n    //         </Grid>\n    //     })}\n    // </Grid>\n    _jsxDEV(Grid, {\n      container: true,\n      children: devices.map(device => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 2,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            fontWeight: \"bold\",\n            children: device\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            display: \"flex\",\n            flexDirection: {\n              sx: \"row\",\n              md: \"column\"\n            },\n            flexWrap: \"wrap\",\n            children: /*#__PURE__*/_jsxDEV(Device, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this)]\n        }, \"device.\" + device, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(MainPage, \"qi6vxp+US8JFNV5OaeK0qzj7Fjw=\");\n_c = MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["useContext","useEffect","useState","ReceiverListContext","Grid","Typography","jsxDEV","_jsxDEV","MainPage","_s","receiverList","receiverTypes","setReceiverTypes","devices","setDevices","receiverTypesList","filteredSelectedReceivers","filter","receiver","isSelected","forEach","includes","type","push","receiverDeviceList","device","container","children","map","item","xs","md","variant","fontWeight","fileName","_jsxFileName","lineNumber","columnNumber","display","flexDirection","sx","flexWrap","Device","_c","$RefreshReg$"],"sources":["/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/pages/monitorReceivers/mainPage.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\nimport { ReceiverListContext } from \"../../State Management/ReceiverListContext\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { Receiver } from \"./Receiver\";\n\n\n\nexport const MainPage = () => {\n    const { receiverList } = useContext(ReceiverListContext) || {};\n    const [receiverTypes, setReceiverTypes] = useState<string[]>([]);\n    const [devices, setDevices] = useState<string[]>([])\n\n    useEffect(() => {\n        if (receiverList) {\n            let receiverTypesList: string[] = [];\n            const filteredSelectedReceivers = receiverList.filter((receiver) => receiver.isSelected)\n            filteredSelectedReceivers.forEach((receiver) => {\n                if (!receiverTypesList.includes(receiver.type)) {\n                    receiverTypesList.push(receiver.type)\n                }\n            })\n            setReceiverTypes(receiverTypesList)\n        }\n    }, [receiverList])\n\n    useEffect(() => {\n        if (receiverList) {\n            let receiverDeviceList: string[] = [];\n            const filteredSelectedReceivers = receiverList.filter((receiver) => receiver.isSelected)\n            filteredSelectedReceivers.forEach((receiver) => {\n                if (!receiverDeviceList.includes(receiver.device)) {\n                    receiverDeviceList.push(receiver.type)\n                }\n            })\n            setDevices(receiverDeviceList)\n        }\n    }, [receiverList])\n\n    return (\n        // <Grid container>\n        //     {receiverTypes.map((receiverType) => {\n        //         return <Grid item xs={12} md={2} key={\"receiverType.\" + receiverType}>\n        //             <Typography variant=\"h6\" fontWeight='bold'>{receiverType}</Typography>\n        //             <Grid item display=\"flex\" flexDirection={{sx:\"row\", md:\"column\"}} flexWrap=\"wrap\">\n        //             {receiverList && receiverList\n        //                 .filter((receiver => (receiver.type === receiverType) && receiver.isSelected))\n        //                 .map((receiver) => {\n        //                     return <Grid item xs={6} md={12} key={\"deviceBig.\" + receiver.id}>\n        //                         <Receiver  IP={receiver.IP} id={receiver.id} name={receiver.name}/>\n        //                     </Grid>\n        //                 })}\n        //                 </Grid>\n        //         </Grid>\n\n        //     })}\n        // </Grid>\n\n        <Grid container>\n            {devices.map((device) => {\n                return <Grid item xs={12} md={2} key={\"device.\" + device}>\n                    <Typography variant=\"h6\" fontWeight='bold'>{device}</Typography>\n                    <Grid item display=\"flex\" flexDirection={{ sx: \"row\", md: \"column\" }} flexWrap=\"wrap\">\n                        <Device/>\n                    </Grid>\n                </Grid>\n\n            })}\n        </Grid>\n\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
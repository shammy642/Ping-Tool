{"ast":null,"code":"var _jsxFileName = \"/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/State Management/ReceiverListContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ReceiverListContext = /*#__PURE__*/createContext(undefined);\nexport const ReceiverListProvider = props => {\n  _s();\n  const [receiverList, setReceiverList] = useState();\n  const updateReceiverListState = newState => {\n    setReceiverList(newState);\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = () => {\n    fetch(`${process.env.REACT_APP_BACKEND_URL}`, {\n      method: \"GET\"\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      setReceiverList(data);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  const sortReceiverByType = () => {\n    receiverList === null || receiverList === void 0 ? void 0 : receiverList.reduce((types, receiver) => {\n      const type = receiver.type;\n      //If type key doesn't exist yet in accumulator (types), add it\n      if (!types[type]) {\n        types[type] = [];\n      }\n      if (Boolean(receiver.isSelected)) {\n        types[type].push(receiver);\n      }\n      setReceiverList(types);\n    }, {});\n  };\n  return /*#__PURE__*/_jsxDEV(ReceiverListContext.Provider, {\n    value: {\n      receiverList,\n      updateReceiverListState\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(ReceiverListProvider, \"j5wI9gWovVFPJ0PFXyGi6Tm8o/Q=\");\n_c = ReceiverListProvider;\nvar _c;\n$RefreshReg$(_c, \"ReceiverListProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","jsxDEV","_jsxDEV","ReceiverListContext","undefined","ReceiverListProvider","props","_s","receiverList","setReceiverList","updateReceiverListState","newState","fetchData","fetch","process","env","REACT_APP_BACKEND_URL","method","then","response","json","data","console","log","catch","error","sortReceiverByType","reduce","types","receiver","type","Boolean","isSelected","push","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/samuelhoile/Documents/Visual Studio Code Projects/Ping Tool/frontend/src/State Management/ReceiverListContext.tsx"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n\nexport type ReceiverObjectProps = {\n  id: number;\n  name: string;\n  IP: string;\n  device: string;\n  type: string;\n  isSelected: string;\n}\n\nexport type ReceiverListContextType = {\n  receiverList: ReceiverObjectProps[] | undefined;\n  updateReceiverListState: (newState: ReceiverObjectProps[]) => void;\n}\n\ntype ReceiverListByType = {\n  [key: string]: ReceiverObjectProps[]\n}\n\nexport const ReceiverListContext = createContext<ReceiverListContextType | undefined>(undefined);\n\ntype ReceiverListProps = {\n  children: React.ReactNode;\n}\n\nexport const ReceiverListProvider = (props: ReceiverListProps) => {\n  const [receiverList, setReceiverList] = useState<ReceiverObjectProps[] | undefined>();\n  \n  \n  const updateReceiverListState = (newState: ReceiverObjectProps[]) => {\n    setReceiverList(newState)\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = () => {\n    fetch(`${process.env.REACT_APP_BACKEND_URL}`, {\n      method: \"GET\",\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data)\n        setReceiverList(data)\n      })\n      .catch((error) => {\n        console.log(error)\n      })\n  }\n\n  const sortReceiverByType = () => {\n    receiverList?.reduce<ReceiverListByType>((types, receiver) => {\n      const type = receiver.type;\n      //If type key doesn't exist yet in accumulator (types), add it\n      if (!types[type]) {\n          types[type] = [];\n      }\n      if (Boolean(receiver.isSelected)) {\n          types[type].push(receiver);\n      }\n      setReceiverList(types)\n  }, {});\n  }\n\n  return (\n    <ReceiverListContext.Provider value={{ receiverList, updateReceiverListState }}>\n      {props.children}\n    </ReceiverListContext.Provider>\n  )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAoBlE,OAAO,MAAMC,mBAAmB,gBAAGL,aAAa,CAAsCM,SAAS,CAAC;AAMhG,OAAO,MAAMC,oBAAoB,GAAIC,KAAwB,IAAK;EAAAC,EAAA;EAChE,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAoC,CAAC;EAGrF,MAAMU,uBAAuB,GAAIC,QAA+B,IAAK;IACnEF,eAAe,CAACE,QAAQ,CAAC;EAC3B,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACda,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAGA,CAAA,KAAM;IACtBC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,qBAAsB,EAAC,EAAE;MAC5CC,MAAM,EAAE;IACV,CAAC,CAAC,CACCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjBZ,eAAe,CAACY,IAAI,CAAC;IACvB,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;MAChBH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;IACpB,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;IAC/BlB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEmB,MAAM,CAAqB,CAACC,KAAK,EAAEC,QAAQ,KAAK;MAC5D,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAC1B;MACA,IAAI,CAACF,KAAK,CAACE,IAAI,CAAC,EAAE;QACdF,KAAK,CAACE,IAAI,CAAC,GAAG,EAAE;MACpB;MACA,IAAIC,OAAO,CAACF,QAAQ,CAACG,UAAU,CAAC,EAAE;QAC9BJ,KAAK,CAACE,IAAI,CAAC,CAACG,IAAI,CAACJ,QAAQ,CAAC;MAC9B;MACApB,eAAe,CAACmB,KAAK,CAAC;IAC1B,CAAC,EAAE,CAAC,CAAC,CAAC;EACN,CAAC;EAED,oBACE1B,OAAA,CAACC,mBAAmB,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAE3B,YAAY;MAAEE;IAAwB,CAAE;IAAA0B,QAAA,EAC5E9B,KAAK,CAAC8B;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC,CAAC;AAAAjC,EAAA,CA7CYF,oBAAoB;AAAAoC,EAAA,GAApBpC,oBAAoB;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}